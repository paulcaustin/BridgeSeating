		The Chamberlain Bridge Problem

The original problem, as I remember it, was described by
my mother.  They had 24 people to play 8 games of bridge.
But everyone always complained that they ended up playing
the same people all the time.  The goal then was to come
up with a solution where everyone played a game with
everyone else.

This turned out to be much more difficult than a quick
thought would lead you to believe.  In fact, I believe
it is impossible.  But what can we do to improve the
situation?  First we defined a method of scoring a setup.
This enabled us to determine better from worse.  We have
come to agree on minimizing the number of times someone
plays with someone they have already played with.  I call
each of these a "bad seating".

Initially, my mother tried to solve the problem with paper,
pencil, and a big eraser.  I don't recall the exact score
but it was clear that there was more to this problem than
meets the eye.

I tried implementing an exhaustive search for the best
solution.  I soon realized that this approach would take
centuries.  My father tried randomly choosing seating
arrangements and found that an acceptable solution was
quiet elusive.

I eventually arrived at the concept of picking each table's
seating arrangement by looking at what problem's a decision
would cause while choosing the next table's seating.  This
look-ahead strategy resembled that used by game-playing
strategy programs.  Despite complications unique to our
challenge I eventually got a program working that could
look about 6 tables (a whole bridge-game) ahead and still
be quick enough to make some progress.  After weeks of CPU
time, with frequent restarts I arrived at a solution which
scored 33 bad seatings.

This seating arrangement was used for quite a while by my
mother's bridge club.  Later, I tried something called
Simulated Annealing.  This algorithm is modeled after the
shaping and cooling, shaping and cooling used by a blacksmith.
A small change and a large change are defined.  A mixture of
the two are used to try to locate an optimum in the solution
space.  As the program progresses, less and less of the large
changes are used.  This is supposed to zero in on a global
optimum but it failed miserably for me.  I'm sure the definition
of a small change and a large change are key to the success of
this algorithm so perhaps my choices were unsuitable.

I stumbled across another method of finding an optimal
solution in a huge solution space.  The Genetic Algorithm
was used to solve the typical example problem of the Traveling
Salesman (Find the shortest path for a salesman to visit each
of 100 cities).  I realized that this could be adapted for The
Bridge Problem.

Put simply, a Genetic Algorithm creates "creatures", sorts
them by most likely to survive and then creates mutations and
combinations of the existing creatures to create new ones.
The most successful are used (as in natural selection) in the
mutations and the least successful die.

In my program, a creature is an 8-game 6-table setup.  A
combination of two creatures uses a few games from each setup.
A mutation swaps two seating positions within a game.  These
definitions were arrived at with almost no thought but upon
running it, I came up with a solution which had 31 bad seatings
in about one day!  This was incredible but it was difficult to
reproduce, difficult to improve on, and not much better than 33.

While recalling our past adventures with this problem, my
mother mentioned that the bridge players didn't like being
"player 19" on the current seating arrangement because he
sits at the same table too much.  She also pointed out that
having the same partner twice was a major no-no.

The solutions created by my Genetic Algorithm scored 31 and
32 but were pretty bad in terms of bad partnerings and what
I have come to call "bad tablings" -- repeatedly sitting at
the same table.

I modified my scoring algorithm to score 5 points for the
bad seating, 10 for bad partnering, and 2 for bad tabling.

Starting with completely random creatures, and continuously
mutating through several million generations I have not yet
been able to do significantly better than the setup with 33
bad seatings.  Then I came up with a great idea.

I don't need to start with random creatures.  I should be able
to seed the population with already proven creatures and let
mutation and natural selection do its thing.  IT WORKS GREAT!
I took the original setup, the 32 setup, and the 31 setup,
made a few creatures of each type and started it.  It refined
it a little bit and quit.  I added the refined one to the
list of initial creatures, tweaked some options and ran again.
After running quite a few times I came up with a setup
that has 28 bad seatings, no bad partnerings, and just a few
bad tablings!  A HUGE improvement over the original setup.

What's really slick is that I don't need to know which creatures
are prime evolutionary candidates.  I just throw them all in
together and let Darwinism do it's trick.  It's like trying to
get an ocean full of algea to mutate into a super-human but
spiking the algea with a few humans and other animals to give
it a head start.

So here is the result of about 10 days of my Genetic Algorithm:

This is the original seating arrangement created
by Paul Chamberlain using a game-style look-ahead
strategy which did not consider table repetitions
(or partner repetitions) in the scoring algorithm.

AEKM DFJX GINT BLRV HPCW OQSU
PQBC AFOT DELW GJRU IMSX HKNV
DMTU GKPX AHLQ BNFW JOCV IRES
APIV EGCU DKOR BHTX FNLS JMQW
BGLO CNRX EJPT FMQV DHIU AKSW
ADGV BKJS FRPU HIOW ENQX CLMT
BMHR DPSV CFIK AJNU GQTW ELOX
UVWX IJKL MNOP EFGH ABCD QRST

Score = 341
Old Score = 33

		Seating Repetitions
  A B C D E F G H I J K L M N O P Q R S T U V W X
A . 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 1 0 1 1 1 2 1 0
B 1 . 2 1 0 1 1 2 0 1 1 2 1 1 1 1 1 2 1 1 0 1 1 1
C 1 2 . 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 0 1 1 1 1 1
D 2 1 1 . 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 1 2 2 1 1
E 1 0 1 1 . 1 2 1 1 1 1 2 1 1 1 1 1 1 1 1 1 0 1 2
F 1 1 1 1 1 . 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1
G 1 1 1 1 2 1 . 1 1 1 1 1 0 1 1 1 1 1 0 2 2 1 1 1
H 1 2 1 1 1 1 1 . 2 0 1 1 1 1 1 1 1 1 0 1 1 1 2 1
I 1 0 1 1 1 1 1 2 . 1 2 1 1 1 1 1 0 1 2 1 1 1 1 1
J 1 1 1 1 1 1 1 0 1 . 2 1 1 1 1 1 1 1 1 1 2 1 1 1
K 2 1 1 1 1 1 1 1 2 2 . 1 1 1 1 1 0 1 2 0 0 1 1 1
L 1 2 1 1 2 1 1 1 1 1 1 . 1 1 2 0 1 1 1 1 0 1 1 1
M 1 1 1 1 1 1 0 1 1 1 1 1 . 1 1 1 2 1 1 2 1 1 1 1
N 1 1 1 0 1 2 1 1 1 1 1 1 1 . 1 1 1 1 1 1 1 1 1 2
O 1 1 1 1 1 1 1 1 1 1 1 2 1 1 . 1 1 1 1 1 1 1 1 1
P 1 1 2 1 1 1 1 1 1 1 1 0 1 1 1 . 1 1 1 1 1 2 1 1
Q 1 1 1 0 1 1 1 1 0 1 0 1 2 1 1 1 . 1 2 2 1 1 2 1
R 0 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 . 2 1 2 1 0 1
S 1 1 0 1 1 1 0 0 2 1 2 1 1 1 1 1 2 2 . 1 1 1 1 1
T 1 1 1 1 1 1 2 1 1 1 0 1 2 1 1 1 2 1 1 . 1 0 1 1
U 1 0 1 2 1 1 2 1 1 2 0 0 1 1 1 1 1 2 1 1 . 1 1 1
V 2 1 1 2 0 1 1 1 1 1 1 1 1 1 1 2 1 1 1 0 1 . 1 1
W 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 0 1 1 1 1 . 1
X 0 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 .

		Table Repetitions
  A B C D E F G H I J K L M N O P Q R S T U V W X
1:3 3 1 2 1 0 2 1 1 0 1 1 3 0 1 2 1 1 0 1 2 3 1 1 
2:1 1 2 2 1 2 2 0 1 3 3 1 0 1 1 2 0 1 2 1 1 1 0 3 
3:1 0 1 2 2 2 1 1 2 1 2 2 1 2 2 3 1 2 0 2 1 0 1 0 
4:1 3 0 0 1 3 2 3 1 2 0 1 1 2 1 0 1 2 0 1 2 2 2 1 
5:1 1 3 2 1 1 1 2 2 1 0 1 1 2 1 1 2 0 2 1 1 1 2 2 
6:1 0 1 0 2 0 0 1 1 1 2 2 2 1 2 0 3 2 4 2 1 1 2 1 

This is the improved seating arrangement created
by Paul Chamberlain using a Genetic Algorithm
and seeding it with previous tolerable solutions.
This strategy did consider table repetitions (and
partner repetitions) in the scoring algorithm.
This solution arrived at on 10/17/1994.

ABWS QXCR GLDM NJOP TVKU FEIH
LXVN CHKW TQIP DOSE URAG FJMB
HDBT INKA XUPF GMEC JLRW SVOQ
JPCK LVBR WIDX GTSF QMEA HOUN
IKER DUQJ AFLO CTNS HMXV GPWB
AVCD PLTE HRJS IBMU QNWF GOKX
CULS JVGI EBNX KFQD WMTO RPAH
DFRN MKSP WVEU GHLQ BCIO XATJ

Score = 294
Old Score = 28

		Seating Repetitions
  A B C D E F G H I J K L M N O P Q R S T U V W X
A . 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1
B 1 . 1 1 1 1 1 1 2 1 0 1 2 1 1 1 0 1 1 1 1 1 2 1
C 1 1 . 1 1 0 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1
D 1 1 1 . 1 2 1 1 1 1 1 1 1 1 1 0 2 1 1 1 1 1 1 1
E 1 1 1 1 . 1 1 1 2 0 1 1 2 1 1 1 1 1 1 1 1 1 1 1
F 1 1 0 2 1 . 1 1 1 1 1 1 1 2 1 1 2 1 1 1 1 0 1 1
G 1 1 1 1 1 1 . 1 1 1 1 2 2 0 1 1 1 1 1 1 1 1 1 1
H 1 1 1 1 1 1 1 . 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1
I 1 2 1 1 2 1 1 1 . 1 2 0 1 1 1 1 1 1 0 1 1 1 1 1
J 1 1 1 1 0 1 1 1 1 . 1 1 1 1 1 2 1 2 1 1 1 1 1 1
K 1 0 2 1 1 1 1 1 2 1 . 0 1 1 1 2 1 1 1 1 1 1 1 1
L 1 1 1 1 1 1 2 1 0 1 0 . 1 1 1 1 1 2 1 1 1 2 1 1
M 1 2 1 1 2 1 2 1 1 1 1 1 . 0 1 1 1 0 1 1 1 1 1 1
N 1 1 1 1 1 2 0 1 1 1 1 1 0 . 2 1 1 1 1 1 1 1 1 2
O 1 1 1 1 1 1 1 1 1 1 1 1 1 2 . 1 1 0 2 1 1 1 1 1
P 1 1 1 0 1 1 1 1 1 2 2 1 1 1 1 . 1 1 1 2 1 0 1 1
Q 1 0 1 2 1 2 1 1 1 1 1 1 1 1 1 1 . 1 1 1 1 1 1 1
R 2 1 1 1 1 1 1 2 1 2 1 2 0 1 0 1 1 . 1 0 1 1 1 1
S 1 1 2 1 1 1 1 1 0 1 1 1 1 1 2 1 1 1 . 2 1 1 1 0
T 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 0 2 . 1 1 1 1
U 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 . 2 1 1
V 1 1 1 1 1 0 1 1 1 1 1 2 1 1 1 0 1 1 1 1 2 . 1 2
W 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 . 1
X 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 0 1 1 2 1 .

		Table Repetitions
  A B C D E F G H I J K L M N O P Q R S T U V W X
1:2 2 3 3 1 1 0 1 1 1 2 2 0 2 0 1 0 2 2 1 1 2 1 1 
2:1 1 2 1 1 0 1 1 2 2 3 2 1 1 0 2 2 2 1 1 1 2 1 1 
3:1 1 0 2 2 2 1 1 2 1 0 2 1 1 1 2 1 1 1 1 2 1 2 3 
4:0 1 2 2 2 2 3 1 1 1 1 1 2 2 2 1 2 0 3 2 1 0 0 0 
5:2 1 1 0 1 1 1 1 1 1 1 1 3 1 2 0 2 2 0 2 2 2 3 1 
6:2 2 0 0 1 2 2 3 1 2 1 0 1 1 3 2 1 1 1 1 1 1 1 2 
